{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Videoframe","tagline":"Video Frame - HTML5 Video Frame Capturing","body":"## VideoFrame - HTML5 Video frame rate precision capturing - Version: 0.0.6\r\n### (c) 2012 Allen Sarkisyan - Released under the Open Source MIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished\r\nto do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nProperties\r\n==========\r\nthe FrameRates object - the industry standard video frame rates are defined here, these properties are also available with the fps object after the video has been defined.\r\n\r\n```javascript\r\nvar FrameRates = {\r\n\tfilm: 24,\r\n\tNTSC : 29.97,\r\n\tNTSC_Film: 23.98,\r\n\tNTSC_HD : 59.94,\r\n\tPAL: 25,\r\n\tPAL_HD: 50,\r\n\tweb: 30,\r\n\thigh: 60\r\n};\r\n```\r\n* frameRate - Returns the assigned frameRate\r\n* video - Returns the HTMLVideoElement.\r\n\r\nMethods\r\n==========\r\nThe methods available are get, listen, and stopListen.\r\n* get() - Retrieves the current frame of the playing source.\r\n* listen(tick) - The listen method gets the video frame every 1000 milliseconds, the tick argument over rides the default interval.\r\n* stopListen() - Clears the interval.\r\n* toTime() - Returns the current time value in hh:mm:ss format.\r\n\r\nUsage\r\n==========\r\nStep 1) Declaration - Initial declaration is done with a configuration object.\r\n> The configuration object takes these properties: id, and frameRate. it also provides a callback method.\r\n* id defines the video element;\r\n* frameRate defines the frame rate of the video source being played.\r\n* callback defines a callback function that is called when a frame is captured.\r\n\r\n```javascript\r\nvar video = new VideoFrame({\r\n  id : 'videoPlayer',\r\n\tframeRate: FrameRates.NTSC,\r\n\tcallback : function(response) {\r\n\t\tconsole.log('callback response: ' + response);\r\n\t}\r\n});\r\n```\r\nYou may also initiate VideoFrame without a configuration object if you are certain you have a HTML5 video element on the page, and the video source frame rate is 24fps.\r\n\r\n```javascript\r\nvar video = new VideoFrame();\r\n```\r\n\r\nStep 2) Usage - Retrieval of the current frame is done by calling the get method\r\n* To receive the current frame number, make a call to the video.get(); method, can't be simpler. - you may use your judgment when rounding the floating point remainder.\r\n* video.toTime() - Retrieves the current time in hh:mm:ss format;","google":""}